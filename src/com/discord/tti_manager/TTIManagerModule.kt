package com.discord.tti_manager

import com.discord.logging.Log
import com.discord.react.utilities.NativeArrayExtensionsKt
import com.discord.react.utilities.NativeMapExtensionsKt
import com.discord.tti_manager.react.ReactMarkerListener
import com.facebook.react.bridge.Promise
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import java.util.ArrayList
import kotlin.jvm.internal.q
import nh.w
import oh.r

public class TTIManagerModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule {
   private final val ttiBroadcastReceiver: TTIBroadcastReceiver

   init {
      q.h(var1, "reactContext");
      super(var1);
      this.ttiBroadcastReceiver = new TTIBroadcastReceiver();
   }

   @ReactMethod
   public fun getAllNativeTimestamps(promise: Promise) {
      q.h(var1, "promise");

      var var2: ArrayList;
      var var17: java.util.Iterator;
      try {
         val var3: ArrayList = TTIMetrics.INSTANCE.getTimings();
         var2 = new ArrayList(i.v(var3, 10));
         var17 = var3.iterator();
      } catch (var6: java.lang.Throwable) {
         var1.reject(var6);
         return;
      }

      while (true) {
         try {
            if (!var17.hasNext()) {
               break;
            }

            val var4: TTIMetrics.Timing = var17.next() as TTIMetrics.Timing;
            var2.add(
               NativeMapExtensionsKt.nativeMapOf(
                  new Pair[]{
                     w.a("label", var4.getLabel()),
                     w.a("timestamp", var4.getTimestamp()),
                     w.a("tag", var4.getTag()),
                     w.a("autoGenerated", var4.getAutoGenerated())
                  }
               )
            );
         } catch (var7: java.lang.Throwable) {
            var1.reject(var7);
            return;
         }
      }

      try {
         var1.resolve(NativeArrayExtensionsKt.toNativeArray(var2));
      } catch (var5: java.lang.Throwable) {
         var1.reject(var5);
         return;
      }
   }

   public override fun getConstants(): MutableMap<String, Long> {
      return r.m(new Pair[]{w.a("AppOpenedTimestamp", TTILoggingApplication.Companion.getAppOpenedTimestamp$tti_manager_release())});
   }

   @ReactMethod
   public fun getJSBundleTimestamps(promise: Promise) {
      q.h(var1, "promise");

      try {
         val var2: ReactMarkerListener = ReactMarkerListener.INSTANCE;
         var1.resolve(
            NativeMapExtensionsKt.nativeMapOf(
               new Pair[]{
                  w.a("JSBundleStartedTimestamp", (double)ReactMarkerListener.INSTANCE.getBundleStartedTimestamp()),
                  w.a("JSBundleLoadedTimestamp", (double)var2.getBundleLoadedTimestamp()),
                  w.a("JSBundleParsedTimestamp", (double)var2.getBundleParsedTimestamp())
               }
            )
         );
      } catch (var3: java.lang.Throwable) {
         var1.reject(var3);
         return;
      }
   }

   public override fun getName(): String {
      return "TTIManager";
   }

   public override fun initialize() {
      super.initialize();
      val var1: java.lang.Boolean = BuildConfig.logTTIMetrics;
      q.g(BuildConfig.logTTIMetrics, "logTTIMetrics");
      if (var1) {
         val var2: TTIBroadcastReceiver.Companion = TTIBroadcastReceiver.Companion;
         val var3: ReactApplicationContext = this.getReactApplicationContext();
         q.g(var3, "getReactApplicationContext(...)");
         var2.register(var3, this.ttiBroadcastReceiver);
      }
   }

   public override fun invalidate() {
      super.invalidate();

      try {
         val var1: java.lang.Boolean = BuildConfig.logTTIMetrics;
         q.g(BuildConfig.logTTIMetrics, "logTTIMetrics");
         if (var1) {
            val var2: TTIBroadcastReceiver.Companion = TTIBroadcastReceiver.Companion;
            val var4: ReactApplicationContext = this.getReactApplicationContext();
            q.g(var4, "getReactApplicationContext(...)");
            var2.unregister(var4, this.ttiBroadcastReceiver);
         }
      } catch (var3: Exception) {
      }
   }

   @ReactMethod
   public fun logToDevice(value: String) {
      q.h(var1, "value");
      Log.i$default(Log.INSTANCE, "ttidata", var1, null, 4, null);
   }

   @ReactMethod
   public fun logToDeviceEnabled(promise: Promise) {
      q.h(var1, "promise");
      var1.resolve(BuildConfig.logTTIMetrics);
   }

   @ReactMethod(isBlockingSynchronousMethod = true)
   public fun runningTTIAutomation(): Boolean {
      val var1: java.lang.Boolean = BuildConfig.logTTIMetrics;
      q.g(BuildConfig.logTTIMetrics, "logTTIMetrics");
      return var1;
   }

   @ReactMethod
   public fun trackTTILogged() {
      TTIMetrics.INSTANCE.setLoggedTTI(true);
   }
}
